desc 'build and watch for dev'
task :dev do
  sh "bundle exec jekyll serve --livereload"
end

desc 'build and watch for dev inside docker'
task :dev_docker do
  # docker requires you bind to 0.0.0.0
  sh "bundle exec jekyll serve --livereload --host=0.0.0.0 --port=4000 --livereload-port=35729"
end

desc 'Build for deploy'
task :build_for_deploy do
  # right now this just runs build
  # but we could put some more post-processing scripts in here
  sh "JEKYLL_ENV=production bundle exec jekyll build"
end


# sync files from _site up to s3
# deletes files that exist on the target and dont exist locally
# sets acl to public read for all files
# sets cache control max age to 24 hours
# requires
desc 'Publish website to S3'
task :deploy_production, [:bucket] do |task, args|
  if args[:bucket].nil?
    raise "bucket argument required"
  end

  sh "aws s3 sync ./_site/ s3://#{args[:bucket]}/ --acl public-read --delete --cache-control max-age=86400"
  puts "Site published"
end


# Now we need to invalidate the cloudfront cache for the site
# this takes time! don't run this over and over
# todo - build a list of the files that changed and only invalidate those
desc 'Clears cache from cloudfront'
task :invalidate_cdn_cache, [:cloudfront_distribution_id] do |task, args|
  if args[:cloudfront_distribution_id].nil?
    raise "cloudfront_distribution_id argument required"
  end
  sh "aws cloudfront create-invalidation --paths '/*'  --distribution-id #{args[:cloudfront_distribution_id]}"
  puts "Cache invalidation requested"
end


# Now we need to invalidate the cloudfront cache for the site
# this takes time! don't run this over and over
# todo - build a list of the files that changed and only invalidate those
desc 'show cloudfront invalidations'
task :show_invalidations, [:cloudfront_distribution_id] do |task, args|
  if args[:cloudfront_distribution_id].nil?
    raise "cloudfront_distribution_id argument required"
  end

  sh "aws cloudfront list-invalidations --distribution-id #{args[:cloudfront_distribution_id]}"
end
